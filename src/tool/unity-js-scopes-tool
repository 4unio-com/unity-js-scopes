#!/bin/bash

# Check that there is 1 argument
if [ $# != 1 ]; then
    echo "Usage: unity-js-scopes-tool <path/to/node_modules>"
    exit 1
fi

# Check that the target directory is named "node_modules"
if [[ ! $1 == */node_modules ]] && [[ ! $1 == */node_modules/ ]]; then
    echo "Target directory should be named 'node_modules'"
    exit 1
fi

# Check that the argument is not already a file
if [ -f $1 ]; then
    echo "'$1' already exists as a file"
    exit 1
fi

echo "Installation started."

# Ensure that the target node_modules folder exists
mkdir -p $1

# Copy the unity-js-scopes bindings into the target node_modules folder
echo "Removing '$1/unity-js-scopes' ..." 
rm -rf $1/unity-js-scopes
echo "Copying '/node_modules/unity-js-scopes' to '$1' ..."
cp -r /node_modules/unity-js-scopes $1
echo "Copying '/usr/bin/unity-js-scopes-launcher' to '$1/unity-js-scopes/bin' ..."
mkdir -p $1/unity-js-scopes/bin
cp /usr/bin/unity-js-scopes-launcher $1/unity-js-scopes/bin

# Rebuild any binary npm modules for the current targeted arch
if [ ! -f /usr/bin/node ] && [ -f /usr/bin/nodejs ]; then
    # If we are using the old node + npm:
    echo "Rebuilding binary modules in '$1' (using old nodejs) ..."
    ln -s /usr/bin/nodejs $1/node
    PATH=$1:$PATH nodejs /usr/lib/nodejs/npm/lib/npm.js --prefix=$1/../ rebuild
    rm $1/node
elif [ -f /usr/bin/npm ]; then
    # Else if we are using the new node + npm:
    echo "Rebuilding binary modules in '$1' (using npm) ..."
    npm --prefix=$1/../ rebuild
fi

echo "Installation complete."
