#!/bin/bash

# Check that there are 2 arguments
if [ $# != 2 ] || [ $1 != "install" ]; then
    echo "Usage: unity-js-scopes-tool install <path/to/node_modules>"
    exit 1
fi

# Check that the target directory is named "node_modules"
if [[ ! $2 == */node_modules ]] && [[ ! $2 == */node_modules/ ]]; then
    echo "Target directory should be named 'node_modules'"
    exit 1
fi

# Check that the argument is not already a file
if [ -f $2 ]; then
    echo "'$2' already exists as a file"
    exit 1
fi

echo "Installation started."

# Ensure that the target node_modules folder exists
mkdir -p $2

# Copy the unity-js-scopes bindings into the target node_modules folder
echo "Removing '$2/unity-js-scopes' ..."
rm -rf $2/unity-js-scopes
echo "Copying '/node_modules/unity-js-scopes' to '$2' ..."
cp -r /node_modules/unity-js-scopes $2
echo "Copying '/usr/bin/unity-js-scopes-launcher' to '$2/unity-js-scopes/bin' ..."
mkdir -p $2/unity-js-scopes/bin
cp /usr/bin/unity-js-scopes-launcher $2/unity-js-scopes/bin

# Rebuild any binary npm modules for the current targeted arch
if [ ! -f /usr/bin/node ] && [ -f /usr/bin/nodejs ]; then
    # If we are using the old node + npm:
    echo "Rebuilding binary modules in '$2' (using old nodejs) ..."
    ln -s /usr/bin/nodejs $2/node
    PATH=$2:$PATH nodejs /usr/lib/nodejs/npm/lib/npm.js --prefix=$2/../ rebuild
    rm $2/node
elif [ -f /usr/bin/npm ]; then
    # Else if we are using the new node + npm:
    echo "Rebuilding binary modules in '$2' (using npm) ..."
    npm --prefix=$2/../ rebuild
fi

echo "Installation complete."
